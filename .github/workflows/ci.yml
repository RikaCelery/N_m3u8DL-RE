name: CI/Build

on:
  
  push:
    branches: [ armv7 ]
  workflow_dispatch:

env:
  DOTNET_SDK_VERSION: "8.0.*"

jobs:

  build-linux-armv7:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm64-20220312201346-b2c2436

    steps:
      - uses: actions/checkout@v1
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: dotnet publish src/N_m3u8DL-RE -r linux-arm32 -c Release -p:StripSymbols=true -p:CppCompilerAndLinker=clang-9 -p:SysRoot=/crossrootfs/arm32 -o artifact

      - name: Upload Artifact[linux-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_linux-arm64
          path: artifact/N_m3u8DL-RE

  create_draft_release:
    name: Create Github draft release
    if: ${{ github.event.inputs.doRelease == 'true' }}
    needs: [build-win-x64-arm64,build-linux-x64,build-linux-arm64,build-mac-x64-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Audit gh version
        run: gh --version

      - name: Check for existing release
        id: check_release
        run: |
          echo "::echo::on"
          gh release view --repo '${{ github.repository }}' '${{ github.event.inputs.tag }}' \
            && echo "already_exists=true" >> $GITHUB_ENV \
            || echo "already_exists=false" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repo
        if: env.already_exists == 'false'
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.ref }}'

      - name: Create release
        if: env.already_exists == 'false'
        run: >
          gh release create
          '${{ github.event.inputs.tag }}'
          --draft
          --repo '${{ github.repository }}'
          --title '${{ github.event.inputs.tag }}'
          --target '${{ github.event.inputs.ref }}'
          --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  attach_to_release:
    name: Attach native executables to release
    if: ${{ github.event.inputs.doRelease == 'true' }}
    needs: create_draft_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: benjlevesque/short-sha@v2.2
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        
      - name: GH version
        run: gh --version
      
      - name: Fetch executables
        uses: actions/download-artifact@v3

      - name: Tar (linux, macOS)
        run: for dir in *{osx,linux}*; do tar cvzfp "${dir}_ci_${{ env.date }}_${{ env.SHA }}.tar.gz" "$dir"; done
        
      - name: Zip (windows)
        run: for dir in *win*; do zip -r "${dir}_ci_${{ env.date }}_${{ env.SHA }}.zip" "$dir"; done

      - name: Upload
        run: |
          until gh release upload --clobber --repo ${{ github.repository }} ${{ github.event.inputs.tag }} *.zip *.tar.gz; do
            echo "Attempt $((++attempts)) to upload release artifacts failed. Will retry in 20s"
            sleep 20
          done
        timeout-minutes: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHA: ${{ env.SHA }}
